Assumptions:
* The data provided appears to be stored in MongoDB so the foreign keys that are strings are using Mongo's ObjectId column.

* BrandCode references a partner file, for simplicity I'm assuming this could just be a relationship 
based on string equality so I am not diagramming it as a Foreign Key.

* There is a many-to-many relationship between Receipts and Items which is represented in my entity relationship diagram 
and vastly simplified as the data quality in `receipts.json` isn't great.

* Dates are presented as what appears to be an epoch time with millisecond percision.
To keep things consistent, I've kept these columns as Integers in my relational model.

* The data provided has all monetary values presented as a string. Likely in a production environment this would be better
represented as total "cents" which can be presented in the common dollars and cents format, but for simplicity's sake
I've kept the columns as String types.

* I debated on whether to store an Item's price on the many-to-many join table but kept it on the Items table as
there is a "final price" field in the data given which would likely happen at checkout/some workflow.

Thought Process:
* In order to test my queries, I simply seeded a SQLite3 table as this is part of the standard library in Python.

* I tested all my queries on this data to ensure they work as intended.